CREATE DATABASE IF NOT EXISTS Users;

USE Users;

CREATE TABLE IF NOT EXISTS Users.users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'customer') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Books Table
CREATE TABLE IF NOT EXISTS books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(100) NOT NULL,
    total_copies INT NOT NULL DEFAULT 0,
    available_copies INT NOT NULL DEFAULT 0,
    publication_year INT NOT NULL,
	cover_image VARCHAR(255),  -- Store image file path or URL as a string
    -- Add other book attributes as needed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Create Reservations Table
CREATE TABLE IF NOT EXISTS reservations (
     reservation_id INT AUTO_INCREMENT PRIMARY KEY,  -- Unique ID for each reservation
    user_id INT NOT NULL,                           -- User making the reservation
    book_id INT NOT NULL,                           -- The book being reserved
    number_of_copies INT NOT NULL,                  -- Number of copies reserved
    status ENUM('reserved', 'completed', 'cancelled', 'collected','overdue') NOT NULL DEFAULT 'reserved',  -- Status of the reservation
    reserve_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Date of the reservation (auto-generated)
    collect_date DATE DEFAULT NULL,                 -- Actual date when the book is collected (to be updated later)
    collect_date_deadline DATE GENERATED ALWAYS AS (DATE_ADD(reserve_date, INTERVAL 7 DAY)) VIRTUAL, -- Derived attribute, 7 days from reserve_date
    return_date DATE GENERATED ALWAYS AS (DATE_ADD(collect_date, INTERVAL 14 DAY)) VIRTUAL,          -- Derived attribute, 14 days from collect_date
    returned_at DATE DEFAULT NULL,
    -- Add other reservation attributes as needed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users.users(id),
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);



CREATE TABLE `sessions` (
    `id` VARCHAR(255) NOT NULL,
    `expires` INT(11) UNSIGNED NOT NULL,
    `data` TEXT,
    PRIMARY KEY (`id`)
);

INSERT INTO users (username, email, password, role)
VALUES ('kabeerAdmin','kabeerAdmin@kabeerAdmin.com' ,'$2a$10$7NKsLtXu6T/hYYDMWhSnJO4MCaodrdyzMYV7RCcK3J8HY2idKAsiu', 'admin');










