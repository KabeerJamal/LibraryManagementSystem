CREATE DATABASE IF NOT EXISTS Users;

USE Users;

CREATE TABLE IF NOT EXISTS Users.users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'customer') NOT NULL,
    reservation_count INT DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Books Table
CREATE TABLE IF NOT EXISTS books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(100) NOT NULL,
    total_copies INT NOT NULL DEFAULT 0,
    available_copies INT NOT NULL DEFAULT 0,
    publication_year INT NOT NULL,
	cover_image VARCHAR(255),  -- Store image file path or URL as a string
    -- Add other book attributes as needed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


-- Create Reservations Table
CREATE TABLE IF NOT EXISTS reservations (
     reservation_id INT AUTO_INCREMENT PRIMARY KEY,  -- Unique ID for each reservation
    user_id INT NOT NULL,                           -- User making the reservation
    book_id INT NOT NULL,                           -- The book being reserved
    number_of_copies INT NOT NULL,                  -- Number of copies reserved
    status ENUM('reserved', 'completed', 'cancelled', 'collected','overdue','baddebt') NOT NULL DEFAULT 'reserved',  -- Status of the reservation
    reserve_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Date of the reservation (auto-generated)
    collect_date DATE DEFAULT NULL,                 -- Actual date when the book is collected (to be updated later)
    collect_date_deadline DATE GENERATED ALWAYS AS (DATE_ADD(reserve_date, INTERVAL 7 DAY)) VIRTUAL, -- Derived attribute, 7 days from reserve_date
    return_date DATE GENERATED ALWAYS AS (DATE_ADD(collect_date, INTERVAL 14 DAY)) VIRTUAL,          -- Derived attribute, 14 days from collect_date
    returned_at DATE DEFAULT NULL,
    -- Add other reservation attributes as needed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES Users.users(id),
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);



CREATE TABLE `sessions` (
    `id` VARCHAR(255) NOT NULL,
    `expires` INT(11) UNSIGNED NOT NULL,
    `data` TEXT,
    PRIMARY KEY (`id`)
);

INSERT INTO users (username, email, password, role)
VALUES ('kabeerAdmin','kabeerAdmin@kabeerAdmin.com' ,'$2a$10$7NKsLtXu6T/hYYDMWhSnJO4MCaodrdyzMYV7RCcK3J8HY2idKAsiu', 'admin');


-- Reservations Table
CREATE TABLE IF NOT EXISTS reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,      -- Unique ID for each reservation
    user_id INT NOT NULL,                               -- User making the reservation
    status ENUM('reserved', 'completed', 'cancelled', 'collected', 'overdue') NOT NULL DEFAULT 'reserved',  -- Status of reservation
    reserve_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,   -- Date of the reservation (auto-generated)
    collect_date DATE DEFAULT NULL,                     -- Actual date when the books are collected
    collect_date_deadline DATE GENERATED ALWAYS AS (DATE_ADD(reserve_date, INTERVAL 7 DAY)) VIRTUAL, -- 7 days from reserve_date
    return_date DATE GENERATED ALWAYS AS (DATE_ADD(collect_date, INTERVAL 14 DAY)) VIRTUAL,          -- 14 days from collect_date
    returned_at DATE DEFAULT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    FOREIGN KEY (user_id) REFERENCES Users.users(id)    -- Link to the user table
);

-- Reservation Items Table
CREATE TABLE IF NOT EXISTS reservation_items (
    item_id INT AUTO_INCREMENT PRIMARY KEY,               -- Unique ID for each reservation item
    reservation_id INT NOT NULL,                          -- Link to the reservation
    book_id INT NOT NULL,                                 -- The book being reserved
    number_of_copies INT NOT NULL,                        -- Number of copies reserved for this book
    FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id) ON DELETE CASCADE,
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);


CREATE TABLE IF NOT EXISTS user_punishments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,         -- User can have multiple punishments
    punishment_id INT NOT NULL,           -- References punishments table
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('active','completed') NOT NULL DEFAULT 'active',
    fine_amount DECIMAL(10,2) DEFAULT NULL,   -- Only if applicable
    duration_in_days INT DEFAULT NULL,        -- Duration of restriction

    CONSTRAINT fk_userpunishments_users
        FOREIGN KEY (user_id) REFERENCES users(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,

    CONSTRAINT fk_userpunishments_punishments
        FOREIGN KEY (punishment_id) REFERENCES punishments(punishment_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);


CREATE TABLE IF NOT EXISTS punishments (
    punishment_id INT AUTO_INCREMENT PRIMARY KEY,
    punishment_type ENUM('fine', 'noReservations', 'deactivation') NOT NULL,
    description VARCHAR(255) DEFAULT NULL
);


CREATE TABLE IF NOT EXISTS punishment_reservations (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_punishment_id INT NOT NULL,      -- Links to user_punishments table
    reservation_id INT NOT NULL,          -- Links to overdue reservations

    CONSTRAINT fk_punish_reserv_userpunish
        FOREIGN KEY (user_punishment_id) REFERENCES user_punishments(id)
        ON DELETE CASCADE
        ON UPDATE CASCADE,

    CONSTRAINT fk_punish_reserv_reservations
        FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);

CREATE TABLE IF NOT EXISTS punishment_active (
    id INT AUTO_INCREMENT PRIMARY KEY,
    context ENUM('bad_debt', 'overdue') NOT NULL UNIQUE, -- Specifies the context of the punishment
    punishment_id INT NOT NULL,                   -- Links to punishments table
    threshold INT NOT NULL,                        -- Number of offenses before punishment is applied
    fine_amount DECIMAL(10,2) DEFAULT NULL,        -- If applicable for fines
    duration_in_days INT DEFAULT NULL,            -- Duration of restriction

    CONSTRAINT fk_active_punishment
        FOREIGN KEY (punishment_id) REFERENCES punishments(punishment_id)
        ON DELETE CASCADE
        ON UPDATE CASCADE
);



CREATE TABLE IF NOT EXISTS settings (
    id INT AUTO_INCREMENT PRIMARY KEY,    -- Unique ID for each setting
    key_name VARCHAR(255) UNIQUE NOT NULL, -- Name of the setting (e.g., 'reservation_limit')
    value INT NOT NULL                     -- Value of the setting
);

-- Insert default value for the reservation limit

ALTER TABLE Users.users 
ADD COLUMN reservation_count INT DEFAULT 0;



ALTER TABLE reservations
ADD COLUMN is_active BOOLEAN NOT NULL DEFAULT TRUE;




ALTER TABLE punishment_active
ADD CONSTRAINT unique_context UNIQUE (context);


SET FOREIGN_KEY_CHECKS = 0;
TRUNCATE TABLE user_punishments;
TRUNCATE TABLE punishment_reservations;
SET FOREIGN_KEY_CHECKS = 1;









ALTER TABLE user_punishments
ADD COLUMN context ENUM('baddebt', 'overdue') DEFAULT NULL;





SELECT * FROM punishments WHERE punishment_id = 1;

select * from user_punishments;
select * from punishment_reservations;
select * from punishment_active;
select * from punishments;
select * from settings;
select * from reservations;
select * from reservation_items;
select * from users;
select * from books;




