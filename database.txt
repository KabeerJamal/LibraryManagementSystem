Users Table: This will store information about all users including both admins and customers.
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Admins Table: Inherits attributes from Users.
CREATE TABLE Admins (
    admin_id INT PRIMARY KEY,
    FOREIGN KEY (admin_id) REFERENCES Users(user_id) ON DELETE CASCADE
);


Customers Table: Inherits attributes from Users.
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    FOREIGN KEY (customer_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    membership_date DATE NOT NULL
);

Books Table: Stores information about books.
CREATE TABLE Books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    isbn VARCHAR(20) UNIQUE NOT NULL,
    publication_year YEAR NOT NULL,
    copies_available INT DEFAULT 1 CHECK (copies_available >= 0)
);
######MySQL's YEAR data type accepts values between 1901 and 2155, or 0000. 


Reservations Table: Stores information about book reservations.
CREATE TABLE Reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    customer_id INT NOT NULL,
    reservation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('reserved', 'collected', 'cancelled') DEFAULT 'reserved',
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

Overdue Table: Stores information about overdue reservations.
CREATE TABLE Overdue (
    overdue_id INT AUTO_INCREMENT PRIMARY KEY,
    reservation_id INT NOT NULL,
    overdue_date DATE NOT NULL,
    fine DECIMAL(5,2) DEFAULT 0.00,
    FOREIGN KEY (reservation_id) REFERENCES Reservations(reservation_id)
);


Triggers
Update Copies Available After Reservation: Trigger to decrement book copies when a reservation is made
CREATE TRIGGER after_reservation_insert
AFTER INSERT ON Reservations
FOR EACH ROW
BEGIN
    IF NEW.status = 'reserved' THEN
        UPDATE Books
        SET copies_available = copies_available - 1
        WHERE book_id = NEW.book_id;
    END IF;
END;


Update Copies Available After Reservation Cancellation: Trigger to increment book copies when a reservation is cancelled.
CREATE TRIGGER after_reservation_update
AFTER UPDATE ON Reservations
FOR EACH ROW
BEGIN
    IF NEW.status = 'cancelled' AND OLD.status = 'reserved' THEN
        UPDATE Books
        SET copies_available = copies_available + 1
        WHERE book_id = NEW.book_id;
    END IF;
END;


Handle Overdue Records: Trigger to automatically create an overdue record if a reservation is not collected within a specified period (e.g., 7 days).
CREATE TRIGGER after_reservation_check
AFTER UPDATE ON Reservations
FOR EACH ROW
BEGIN
    DECLARE current_date DATE;
    SET current_date = CURDATE();
    
    IF NEW.status = 'collected' THEN
        DELETE FROM Overdue WHERE reservation_id = NEW.reservation_id;
    ELSEIF NEW.status = 'reserved' AND DATE_ADD(NEW.reservation_date, INTERVAL 7 DAY) < current_date THEN
        INSERT INTO Overdue (reservation_id, overdue_date, fine)
        VALUES (NEW.reservation_id, current_date, 5.00);
    END IF;
END;


Transactions and Savepoints
Ensure that transactions are properly managed, allowing rollback to savepoints in case of errors.
-- Start a new transaction
START TRANSACTION;

-- Set a savepoint before making changes
SAVEPOINT before_inserting_user;

-- Insert a new user
INSERT INTO Users (username, password, email) VALUES ('john_doe', 'securepassword', 'john@example.com');

-- Assume we have some logic to check if the operation was successful
-- For demonstration, we will use a condition to rollback or commit
DECLARE success BOOLEAN DEFAULT TRUE;

-- Here you would have some logic to determine the success of the operation
-- For example, checking if the user was actually inserted, etc.
IF success THEN
    -- Commit the transaction if everything is successful
    COMMIT;
ELSE
    -- Rollback to the savepoint in case of any error
    ROLLBACK TO SAVEPOINT before_inserting_user;
    -- Optionally, you can release the savepoint if no longer needed
    RELEASE SAVEPOINT before_inserting_user;
END IF;






############# FULL SQL CODE ##########################
-- Create the database
CREATE DATABASE LibraryManagementSystem;
USE LibraryManagementSystem;

-- Create the Users table
CREATE TABLE Users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the Admins table
CREATE TABLE Admins (
    admin_id INT PRIMARY KEY,
    FOREIGN KEY (admin_id) REFERENCES Users(user_id) ON DELETE CASCADE
);

-- Create the Customers table
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    FOREIGN KEY (customer_id) REFERENCES Users(user_id) ON DELETE CASCADE,
    membership_date DATE NOT NULL
);

-- Create the Books table
CREATE TABLE Books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(255) NOT NULL,
    isbn VARCHAR(20) UNIQUE NOT NULL,
    publication_year YEAR NOT NULL,
    copies_available INT DEFAULT 1 CHECK (copies_available >= 0)
);

-- Create the Reservations table
CREATE TABLE Reservations (
    reservation_id INT AUTO_INCREMENT PRIMARY KEY,
    book_id INT NOT NULL,
    customer_id INT NOT NULL,
    reservation_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('reserved', 'collected', 'cancelled') DEFAULT 'reserved',
    FOREIGN KEY (book_id) REFERENCES Books(book_id),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create the Overdue table
CREATE TABLE Overdue (
    overdue_id INT AUTO_INCREMENT PRIMARY KEY,
    reservation_id INT NOT NULL,
    overdue_date DATE NOT NULL,
    fine DECIMAL(5,2) DEFAULT 0.00,
    FOREIGN KEY (reservation_id) REFERENCES Reservations(reservation_id)
);

-- Trigger to decrement copies available after a reservation
CREATE TRIGGER after_reservation_insert
AFTER INSERT ON Reservations
FOR EACH ROW
BEGIN
    IF NEW.status = 'reserved' THEN
        UPDATE Books
        SET copies_available = copies_available - 1
        WHERE book_id = NEW.book_id;
    END IF;
END;

-- Trigger to increment copies available after reservation cancellation
CREATE TRIGGER after_reservation_update
AFTER UPDATE ON Reservations
FOR EACH ROW
BEGIN
    IF NEW.status = 'cancelled' AND OLD.status = 'reserved' THEN
        UPDATE Books
        SET copies_available = copies_available + 1
        WHERE book_id = NEW.book_id;
    END IF;
END;

-- Trigger to handle overdue records
CREATE TRIGGER after_reservation_check
AFTER UPDATE ON Reservations
FOR EACH ROW
BEGIN
    DECLARE current_date DATE;
    SET current_date = CURDATE();
    
    IF NEW.status = 'collected' THEN
        DELETE FROM Overdue WHERE reservation_id = NEW.reservation_id;
    ELSEIF NEW.status = 'reserved' AND DATE_ADD(NEW.reservation_date, INTERVAL 7 DAY) < current_date THEN
        INSERT INTO Overdue (reservation_id, overdue_date, fine)
        VALUES (NEW.reservation_id, current_date, 5.00);
    END IF;
END;

-- Example transaction with savepoints
START TRANSACTION;

-- Savepoint before inserting a user
SAVEPOINT before_inserting_user;

-- Insert a new user
INSERT INTO Users (username, password, email) VALUES ('john_doe', 'securepassword', 'john@example.com');

-- Assume a condition to determine success
DECLARE success BOOLEAN DEFAULT TRUE;

IF success THEN
    COMMIT;
ELSE
    ROLLBACK TO SAVEPOINT before_inserting_user;
    RELEASE SAVEPOINT before_inserting_user;
END IF;





###################### SAMPLE INSERTIONS OF BOOK ##############
INSERT INTO Books (title, author, isbn, publication_year, copies_available) VALUES 
('To Kill a Mockingbird', 'Harper Lee', '9780061120084', 2010, 5),
('1984', 'George Orwell', '9780451524935', 2009, 3),
('The Great Gatsby', 'F. Scott Fitzgerald', '9780743273565', 2008, 4),
('The Catcher in the Rye', 'J.D. Salinger', '9780316769488', 2007, 6),
('Pride and Prejudice', 'Jane Austen', '9781503290563', 2006, 2),
('The Hobbit', 'J.R.R. Tolkien', '9780345339683', 2005, 8),
('Fahrenheit 451', 'Ray Bradbury', '9781451673319', 2004, 7),
('Moby-Dick', 'Herman Melville', '9781503280786', 2003, 1),
('War and Peace', 'Leo Tolstoy', '9781400079988', 2002, 4),
('Crime and Punishment', 'Fyodor Dostoevsky', '9780486415871', 2001, 5);
