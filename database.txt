-- Create Database
CREATE DATABASE IF NOT EXISTS library_management_system;
USE library_management_system;

-- Create Users Table
CREATE TABLE IF NOT EXISTS users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL,
    password VARCHAR(255) NOT NULL,
    user_type ENUM('admin', 'customer') NOT NULL,
    -- Add other user attributes as needed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Books Table
CREATE TABLE IF NOT EXISTS books (
    book_id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    author VARCHAR(100) NOT NULL,
    total_copies INT NOT NULL DEFAULT 0,
    available_copies INT NOT NULL DEFAULT 0,
    isbn VARCHAR(20) NOT NULL,
    publication_year INT NOT NULL,
    -- Add other book attributes as needed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Reservations Table
CREATE TABLE IF NOT EXISTS reservations (
     reservation_id INT AUTO_INCREMENT PRIMARY KEY,  -- Unique ID for each reservation
    user_id INT NOT NULL,                           -- User making the reservation
    book_id INT NOT NULL,                           -- The book being reserved
    number_of_copies INT NOT NULL,                  -- Number of copies reserved
    status ENUM('reserved', 'completed', 'cancelled', 'collected') NOT NULL DEFAULT 'reserved',  -- Status of the reservation
    reserve_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,  -- Date of the reservation (auto-generated)
    collect_date DATE DEFAULT NULL,                 -- Actual date when the book is collected (to be updated later)
    collect_date_deadline DATE GENERATED ALWAYS AS (DATE_ADD(reserve_date, INTERVAL 7 DAY)) VIRTUAL, -- Derived attribute, 7 days from reserve_date
    return_date DATE GENERATED ALWAYS AS (DATE_ADD(collect_date, INTERVAL 14 DAY)) VIRTUAL,          -- Derived attribute, 14 days from collect_date
    -- Add other reservation attributes as needed
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);

-- Create Overdue Reservations Table (for fines)
CREATE TABLE IF NOT EXISTS overdue_reservations (
    reservation_id INT PRIMARY KEY,
    overdue_fine DECIMAL(10, 2) DEFAULT 0.00,
    paid BOOLEAN NOT NULL DEFAULT 0,
    FOREIGN KEY (reservation_id) REFERENCES reservations(reservation_id)
);

-- Create Transactions Table
CREATE TABLE IF NOT EXISTS transactions (
    transaction_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    transaction_type ENUM('issue', 'return') NOT NULL,
    book_id INT NOT NULL,
    transaction_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    -- Add other transaction attributes as needed
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (book_id) REFERENCES books(book_id)
);

-- Example Transactions

-- Example: Issue Book Transaction
DELIMITER $$

CREATE PROCEDURE IssueBook(IN p_user_id INT, IN p_book_id INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;
    
    -- Insert into transactions table
    INSERT INTO transactions (user_id, transaction_type, book_id)
    VALUES (p_user_id, 'issue', p_book_id);
    
    -- Update reservations table (mark reservation as completed)
    UPDATE reservations
    SET status = 'completed'
    WHERE user_id = p_user_id
    AND book_id = p_book_id;
    
    COMMIT;
END$$

DELIMITER ;

-- Example: Return Book Transaction
DELIMITER $$

CREATE PROCEDURE ReturnBook(IN p_user_id INT, IN p_book_id INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;
    
    -- Update transactions table (record return)
    UPDATE transactions
    SET transaction_type = 'return'
    WHERE user_id = p_user_id
    AND book_id = p_book_id
    AND transaction_type = 'issue'
    LIMIT 1;
    
    -- Update reservations table (cancel reservation)
    UPDATE reservations
    SET status = 'cancelled'
    WHERE user_id = p_user_id
    AND book_id = p_book_id
    AND status = 'reserved'
    LIMIT 1;
    
    -- Optional: Update overdue_reservations table if overdue and mark fines as paid
    
    COMMIT;
END$$

DELIMITER ;

-- Example: Renew Book Transaction
DELIMITER $$

CREATE PROCEDURE RenewBook(IN p_user_id INT, IN p_book_id INT, IN p_new_due_date DATE)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;
    
    -- Update reservations table (renew reservation)
    UPDATE reservations
    SET due_date = p_new_due_date
    WHERE user_id = p_user_id
    AND book_id = p_book_id
    AND status = 'reserved'
    LIMIT 1;
    
    COMMIT;
END$$

DELIMITER ;

-- Example: Pay Overdue Fines Transaction
DELIMITER $$

CREATE PROCEDURE PayOverdueFines(IN p_user_id INT, IN p_book_id INT)
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;
    
    -- Update overdue_reservations table (mark fines as paid)
    UPDATE overdue_reservations AS o
    JOIN reservations AS r ON o.reservation_id = r.reservation_id
    SET o.paid = 1
    WHERE r.user_id = p_user_id
    AND r.book_id = p_book_id
    AND r.status = 'reserved'
    AND r.due_date < NOW()
    AND o.paid = 0;
    
    COMMIT;
END$$

DELIMITER ;

-- Example: Update User Email Transaction (Admin only)
DELIMITER $$

CREATE PROCEDURE UpdateUserEmail(IN p_admin_id INT, IN p_user_id INT, IN p_new_email VARCHAR(100))
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        ROLLBACK;
    END;

    START TRANSACTION;
    
    -- Update users table (update user email)
    UPDATE users
    SET email = p_new_email
    WHERE user_id = p_user_id
    AND (user_type = 'admin' OR user_id = p_admin_id); -- Ensure admin or self-update only
    
    COMMIT;
END$$

DELIMITER ;
